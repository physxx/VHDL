--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.0 Revision 2 from HDL Works B.V.
--
-- Ease library  : Work
-- HDL library   : Work
-- Host name     : NE-EIN-128-00
-- User name     : yves.meyer
-- Time stamp    : Tue Dec 02 10:53:15 2014
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity Work.nanoControleur
-- Last modified : Tue Jul 08 11:41:42 2014.
--------------------------------------------------------------------------------



library Work, ieee;
use Work.nanoProcesseur_package.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_1164.all;

entity nanoControleur is
  port (
    clk_i    : in     std_logic;
    reset_i  : in     std_logic;
    port_a_i : in     std_logic_vector(7 downto 0);
    port_a_o : out    std_logic_vector(7 downto 0);
    port_b_i : in     std_logic_vector(7 downto 0);
    port_b_o : out    std_logic_vector(7 downto 0));
end entity nanoControleur;

--------------------------------------------------------------------------------
-- Object        : Architecture Work.nanoControleur.Structural
-- Last modified : Tue Jul 08 11:41:42 2014.
--------------------------------------------------------------------------------

architecture Structural of nanoControleur is

  signal wr_np                       : std_logic;
  signal RAM_PORT_select_inst_data_o : std_logic_vector(7 downto 0);
  signal PC_o                        : std_logic_vector(7  downto 0);
  signal ir_o                        : std_logic_vector(13 downto 0);
  signal nanoProcesseur_inst_data_o  : std_logic_vector(7  downto 0);
  signal data_o                      : std_logic_vector(7  downto 0);
  signal addr_o                      : std_logic_vector(7  downto 0);
  signal cs_port_a_i                 : std_logic;
  signal cs_port_b_i                 : std_logic;
  signal cs_ram_i                    : std_logic;

  component nanoProcesseur
    port (
      clk_i     : in     std_logic;
      reset_i   : in     std_logic;
      PC_o      : out    std_logic_vector(7  downto 0);
      IR_i      : in     std_logic_vector(13 downto 0);
      addr_o    : out    std_logic_vector(7  downto 0);
      data_i    : in     std_logic_vector(7  downto 0);
      data_o    : out    std_logic_vector(7  downto 0);
      data_wr_o : out    std_logic);
  end component nanoProcesseur;

  component ROM
    port (
      pc_i : in     std_logic_vector(7 downto 0);
      ir_o : out    std_logic_vector(13 downto 0));
  end component ROM;

  component Data_Multiplexer
    port (
      RAM_data_i    : in     std_logic_vector(7 downto 0);
      port_a_data_i : in     std_logic_vector(7 downto 0);
      port_b_data_i : in     std_logic_vector(7 downto 0);
      data_o        : out    std_logic_vector(7 downto 0);
      cs_ram_i      : in     std_logic;
      cs_port_a_i   : in     std_logic;
      cs_port_b_i   : in     std_logic);
  end component Data_Multiplexer;

  component RAM
    port (
      clk_i  : in     std_logic;
      cs_i   : in     std_logic;
      wr_i   : in     std_logic;
      addr_i : in     std_logic_vector(7  downto 0);
      data_i : in     std_logic_vector(7  downto 0);
      data_o : out    std_logic_vector(7  downto 0));
  end component RAM;

  component Output_Register
    port (
      clk_i   : in     std_logic;
      reset_i : in     std_logic;
      cs_i    : in     std_logic;
      load_i  : in     std_logic;
      data_i  : in     std_logic_vector(7 downto 0);
      data_o  : out    std_logic_vector(7 downto 0));
  end component Output_Register;

  component Address_Decode
    port (
      addr_i      : in     std_logic_vector(7 downto 0);
      cs_port_a_o : out    std_logic;
      cs_port_b_o : out    std_logic;
      cs_ram_o    : out    std_logic);
  end component Address_Decode;

begin

  nPr_inst: nanoProcesseur
    port map(
      clk_i     => clk_i,
      reset_i   => reset_i,
      PC_o      => PC_o,
      IR_i      => ir_o,
      addr_o    => addr_o,
      data_i    => RAM_PORT_select_inst_data_o,
      data_o    => nanoProcesseur_inst_data_o,
      data_wr_o => wr_np);

  ROM_inst: ROM
    port map(
      pc_i => PC_o,
      ir_o => ir_o);

  Data_Mux_inst: Data_Multiplexer
    port map(
      RAM_data_i    => data_o,
      port_a_data_i => port_a_i,
      port_b_data_i => port_b_i,
      data_o        => RAM_PORT_select_inst_data_o,
      cs_ram_i      => cs_ram_i,
      cs_port_a_i   => cs_port_a_i,
      cs_port_b_i   => cs_port_b_i);

  RAM_inst: RAM
    port map(
      clk_i  => clk_i,
      cs_i   => cs_ram_i,
      wr_i   => wr_np,
      addr_i => addr_o,
      data_i => nanoProcesseur_inst_data_o,
      data_o => data_o);

  Port_a_Out_inst: Output_Register
    port map(
      clk_i   => clk_i,
      reset_i => reset_i,
      cs_i    => cs_port_a_i,
      load_i  => wr_np,
      data_i  => nanoProcesseur_inst_data_o,
      data_o  => port_a_o);

  Port_b_Out_inst: Output_Register
    port map(
      clk_i   => clk_i,
      reset_i => reset_i,
      cs_i    => cs_port_b_i,
      load_i  => wr_np,
      data_i  => nanoProcesseur_inst_data_o,
      data_o  => port_b_o);

  Add_Dec_inst: Address_Decode
    port map(
      addr_i      => addr_o,
      cs_port_a_o => cs_port_a_i,
      cs_port_b_o => cs_port_b_i,
      cs_ram_o    => cs_ram_i);
end architecture Structural ; -- of nanoControleur


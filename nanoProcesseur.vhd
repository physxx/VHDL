--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.0 Revision 2 from HDL Works B.V.
--
-- Ease library  : Work
-- HDL library   : Work
-- Host name     : NE-EIN-128-00
-- User name     : yves.meyer
-- Time stamp    : Tue Dec 02 10:53:15 2014
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity Work.nanoProcesseur
-- Last modified : Tue Jul 08 11:26:48 2014.
--------------------------------------------------------------------------------



library Work, ieee;
use Work.nanoProcesseur_package.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_1164.all;

entity nanoProcesseur is
  port (
    clk_i     : in     std_logic;
    reset_i   : in     std_logic;
    PC_o      : out    std_logic_vector(7  downto 0);
    IR_i      : in     std_logic_vector(13 downto 0);
    addr_o    : out    std_logic_vector(7  downto 0);
    data_i    : in     std_logic_vector(7  downto 0);
    data_o    : out    std_logic_vector(7  downto 0);
    data_wr_o : out    std_logic);
end entity nanoProcesseur;

--------------------------------------------------------------------------------
-- Object        : Architecture Work.nanoProcesseur.Structural
-- Last modified : Tue Jul 08 11:26:48 2014.
--------------------------------------------------------------------------------

architecture Structural of nanoProcesseur is

  signal CCR_load_o  : std_logic;
  signal oper_sel_o  : std_logic_vector(2 downto 0);
  signal ALU_o       : std_logic_vector(7 downto 0);
  signal PC_load_o   : std_logic;
  signal PC_inc_o    : std_logic;
  signal IR_load_o   : std_logic;
  signal opcode_o    : std_logic_vector(5 downto 0);
  signal CCR_o       : std_logic_vector(3 downto 0);
  signal Accu_load_o : std_logic;
  signal data_o_net  : std_logic_vector(7  downto 0);
  signal addr_o_net  : std_logic_vector(7  downto 0);
  signal Z_C_V_N     : std_logic_vector(3 downto 0);
  signal oper2_o     : std_logic_vector(7 downto 0);
  signal oper1_o     : std_logic_vector(7 downto 0);
  signal operande1_o : std_logic_vector(7 downto 0);
  signal operande2_o : std_logic_vector(7 downto 0);
  signal oper_load_o : std_logic;

  component Sequenceur
    port (
      clk_i       : in     std_logic;
      reset_i     : in     std_logic;
      PC_inc_o    : out    std_logic;
      PC_load_o   : out    std_logic;
      IR_load_o   : out    std_logic;
      opcode_i    : in     std_logic_vector(5 downto 0);
      CCR_i       : in     std_logic_vector(3 downto 0);
      oper_sel_o  : out    std_logic_vector(2 downto 0);
      oper_load_o : out    std_logic;
      Accu_load_o : out    std_logic;
      CCR_load_o  : out    std_logic;
      data_wr_o   : out    std_logic);
  end component Sequenceur;

  component Program_Counter
    port (
      clk_i     : in     std_logic;
      reset_i   : in     std_logic;
      PC_load_i : in     std_logic;
      PC_o      : out    std_logic_vector(7 downto 0);
      PC_inc_i  : in     std_logic;
      addr_i    : in     std_logic_vector(7 downto 0));
  end component Program_Counter;

  component Instruction_Register
    port (
      clk_i      : in     std_logic;
      reset_i    : in     std_logic;
      IR_load_i  : in     std_logic;
      IR_i       : in     std_logic_vector(13 downto 0);
      operande_o : out    std_logic_vector(7 downto 0);
      opcode_o   : out    std_logic_vector(5 downto 0));
  end component Instruction_Register;

  component Operandes_Multiplexer
    port (
      sel_i   : in     std_logic_vector(2 downto 0);
      Accu_i  : in     std_logic_vector(7 downto 0);
      const_i : in     std_logic_vector(7 downto 0);
      data_i  : in     std_logic_vector(7 downto 0);
      oper1_o : out    std_logic_vector(7 downto 0);
      oper2_o : out    std_logic_vector(7 downto 0));
  end component Operandes_Multiplexer;

  component ALU
    port (
      opcode_i    : in     std_logic_vector(5 downto 0);
      operande1_i : in     std_logic_vector(7 downto 0);
      operande2_i : in     std_logic_vector(7 downto 0);
      CCR_i       : in     std_logic_vector(3 downto 0);
      ALU_o       : out    std_logic_vector(7 downto 0);
      Z_C_V_N     : out    std_logic_vector(3 downto 0));
  end component ALU;

  component Status_Register
    port (
      clk_i      : in     std_logic;
      reset_i    : in     std_logic;
      CCR_load_i : in     std_logic;
      CCR_i      : in     std_logic_vector(3 downto 0);
      CCR_o      : out    std_logic_vector(3 downto 0));
  end component Status_Register;

  component W_Register
    port (
      Accu_in     : in     std_logic_vector(7 downto 0);
      Accu_load_i : in     std_logic;
      Accu_o      : out    std_logic_vector(7 downto 0);
      clk_i       : in     std_logic;
      reset_i     : in     std_logic);
  end component W_Register;

  component Operandes_Register
    port (
      clk_i       : in     std_logic;
      oper1_i     : in     std_logic_vector(7 downto 0);
      oper2_i     : in     std_logic_vector(7 downto 0);
      oper_load_i : in     std_logic;
      operande1_o : out    std_logic_vector(7 downto 0);
      operande2_o : out    std_logic_vector(7 downto 0);
      reset_i     : in     std_logic);
  end component Operandes_Register;

begin
  data_o <= data_o_net;
  addr_o <= addr_o_net;

  Sequenceur_inst: Sequenceur
    port map(
      clk_i       => clk_i,
      reset_i     => reset_i,
      PC_inc_o    => PC_inc_o,
      PC_load_o   => PC_load_o,
      IR_load_o   => IR_load_o,
      opcode_i    => opcode_o,
      CCR_i       => CCR_o,
      oper_sel_o  => oper_sel_o,
      oper_load_o => oper_load_o,
      Accu_load_o => Accu_load_o,
      CCR_load_o  => CCR_load_o,
      data_wr_o   => data_wr_o);

  PC_inst: Program_Counter
    port map(
      clk_i     => clk_i,
      reset_i   => reset_i,
      PC_load_i => PC_load_o,
      PC_o      => PC_o,
      PC_inc_i  => PC_inc_o,
      addr_i    => addr_o_net);

  IR_inst: Instruction_Register
    port map(
      clk_i      => clk_i,
      reset_i    => reset_i,
      IR_load_i  => IR_load_o,
      IR_i       => IR_i,
      operande_o => addr_o_net,
      opcode_o   => opcode_o);

  Oper_Mux_inst: Operandes_Multiplexer
    port map(
      sel_i   => oper_sel_o,
      Accu_i  => data_o_net,
      const_i => addr_o_net,
      data_i  => data_i,
      oper1_o => oper1_o,
      oper2_o => oper2_o);

  ALU_inst: ALU
    port map(
      opcode_i    => opcode_o,
      operande1_i => operande1_o,
      operande2_i => operande2_o,
      CCR_i       => CCR_o,
      ALU_o       => ALU_o,
      Z_C_V_N     => Z_C_V_N);

  Statut_Reg_inst: Status_Register
    port map(
      clk_i      => clk_i,
      reset_i    => reset_i,
      CCR_load_i => CCR_load_o,
      CCR_i      => Z_C_V_N,
      CCR_o      => CCR_o);

  W_Reg_inst: W_Register
    port map(
      Accu_in     => ALU_o,
      Accu_load_i => Accu_load_o,
      Accu_o      => data_o_net,
      clk_i       => clk_i,
      reset_i     => reset_i);

  Oper_Reg_inst: Operandes_Register
    port map(
      clk_i       => clk_i,
      oper1_i     => oper1_o,
      oper2_i     => oper2_o,
      oper_load_i => oper_load_o,
      operande1_o => operande1_o,
      operande2_o => operande2_o,
      reset_i     => reset_i);
end architecture Structural ; -- of nanoProcesseur

